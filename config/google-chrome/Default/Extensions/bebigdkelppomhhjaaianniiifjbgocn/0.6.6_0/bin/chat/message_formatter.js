// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var MessageFormatter, exports, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  var exports = (_ref = window.chat) != null ? _ref : window.chat = {};

  /*
   * Handles formatting and styling text to be displayed to the user.
   *
   * Formatting follows these ruels:
   * - all messages start with a capital letter
   * - messages from the user or to the user have the 'self' style
   * - messages from the user are surrounded by parentheses
   *##
   * - the user's nick is replaced by 'you'
   * - 'you is' is replaced by 'you are'
   * - messages not from the user end in a period
   *##
  */


  MessageFormatter = (function() {

    function MessageFormatter() {
      this._customStyle = [];
      this._nick = void 0;
      this.clear();
    }

    /*
       * Sets the user's nick name, which is used to determine if the message is from
       * or to the user. This field is not reset when clear() is called.
       * @param {string} nick The user's nick name.
    */


    MessageFormatter.prototype.setNick = function(nick) {
      return this._nick = nick;
    };

    /*
       * Sets custom style to be used for all formatted messages. This field is not
       * reset when clear() is called.
       * @param {Array.<string>} customStyle The style to be set
    */


    MessageFormatter.prototype.setCustomStyle = function(customStyle) {
      return this._customStyle = customStyle;
    };

    /*
       * Clears the state of the message formatter. Used between formatting different
       * messages.
    */


    MessageFormatter.prototype.clear = function() {
      this._style = [];
      this._fromUs = this._toUs = false;
      this._forcePrettyFormat = void 0;
      return this._message = '';
    };

    /*
       * Sets the message to be formatted.
       * The following can be used as special literals in the message:
       * - '#from' gets replaced by the the nick the message is from.
       * - '#to' gets replaced by the nick the message pertains to.
       * - '#content' gets replaced by content the message is about.
       * @param {string} message
    */


    MessageFormatter.prototype.setMessage = function(message) {
      return this._message = message;
    };

    /*
       * Returns true if the formatter has a message to format.
       * @return {boolean}
    */


    MessageFormatter.prototype.hasMessage = function() {
      return !!this._message;
    };

    /*
       * Set the context of the message.
       * @param {string=} opt_from The nick the message is from.
       * @param {string=} opt_to The nick the message pertains to.
       * @param {string=} opt_content The context of the message.
    */


    MessageFormatter.prototype.setContext = function(opt_from, opt_to, opt_content) {
      this._from = opt_from;
      this._to = opt_to;
      this._content = opt_content;
      this._fromUs = this._isOwnNick(this._from);
      return this._toUs = this._isOwnNick(this._to);
    };

    /*
       * Set the content of the message.
       * @param {string} content
    */


    MessageFormatter.prototype.setContent = function(content) {
      return this._content = content;
    };

    /*
       * Sets the content to the given string and the message to be that content.
       * @param {string} content
    */


    MessageFormatter.prototype.setContentMessage = function(content) {
      this.setContext(void 0, void 0, content);
      this.setContent(content);
      return this.setMessage('#content');
    };

    /*
       * Set whether the message is from the user or not.
       * By default the message is assumed from the user if their nick matches the
       * from field.
       * This is useful for the /nick message, when the user's nick has just changed.
       * @param {boolean} formUs True if the message is from the user
    */


    MessageFormatter.prototype.setFromUs = function(fromUs) {
      return this._fromUs = fromUs;
    };

    /*
       * Set whether the message pertains to the user or not.
       * By default the message is assumed to pertain to the user if their nick
       * matches the to field.
       * This is useful for the /nick message, when the user's nick has just changed.
       * @param {boolean} toUs True if the message is to the user
    */


    MessageFormatter.prototype.setToUs = function(toUs) {
      return this._toUs = toUs;
    };

    /*
       * Sets whether or not pretty formatting should be used.
       * Pretty formatting includes capitalization and adding a period or adding
       * perentheses.
    */


    MessageFormatter.prototype.setPrettyFormat = function(usePrettyFormat) {
      return this._forcePrettyFormat = usePrettyFormat;
    };

    MessageFormatter.prototype._usePrettyFormat = function() {
      var _ref1;
      return (_ref1 = this._forcePrettyFormat) != null ? _ref1 : !this.hasStyle('no-pretty-format');
    };

    /*
       * Returns a message formatted based on the given context.
       * @return {string} Returns the formatted message.
    */


    MessageFormatter.prototype.format = function() {
      var msg;
      if (!this._message) {
        return '';
      }
      msg = this._incorporateContext();
      if (this._usePrettyFormat()) {
        msg = this._prettyFormat(msg);
      }
      return msg;
    };

    /*
       * Replaces context placeholders, such as '#to', with their corresponding
       * value.
       * @return {string} Returns the formatted message.
    */


    MessageFormatter.prototype._incorporateContext = function() {
      var msg;
      msg = this._message;
      msg = this._fixGrammer('#from', msg);
      msg = msg.replace('#from', this._fromUs ? 'you' : this._escapeDollarSign(this._from));
      msg = msg.replace('#to', this._toUs ? 'you' : this._escapeDollarSign(this._to));
      return msg.replace('#content', this._escapeDollarSign(this._content));
    };

    /*
       * Escapes dollar signs in text so that they are not interpreted when doing
       * string replacements.
       * @return {string} Returns the escaped string
    */


    MessageFormatter.prototype._escapeDollarSign = function(text) {
      if (text) {
        return text.replace('$', '$$$$');
      } else {
        return text;
      }
    };

    /*
       * Handles adding periods, perentheses and capitalization.
       * @return {string} Returns the formatted message.
    */


    MessageFormatter.prototype._prettyFormat = function(msg) {
      if (!this._startsWithNick(msg)) {
        msg = capitalizeString(msg);
      }
      if (this._fromUs) {
        msg = "(" + msg + ")";
      } else if (/[a-zA-Z0-9]$/.test(msg)) {
        msg = "" + msg + ".";
      }
      return msg;
    };

    MessageFormatter.prototype._fixGrammer = function(you, msg) {
      var youPlaceholders, _i, _len;
      youPlaceholders = [];
      if (this._fromUs) {
        youPlaceholders.push('#from');
      }
      if (this._toUs) {
        youPlaceholders.push('#to');
      }
      for (_i = 0, _len = youPlaceholders.length; _i < _len; _i++) {
        you = youPlaceholders[_i];
        msg = msg.replace("" + you + " is", "" + you + " are");
        msg = msg.replace("" + you + " has", "" + you + " have");
      }
      return msg;
    };

    /*
       * Returns true if the given message starts with the nick the message pertains
       * to or the nick the message is being sent from.
    */


    MessageFormatter.prototype._startsWithNick = function(msg) {
      var startsWithFromNick, startsWithToNick;
      startsWithToNick = msg.indexOf(this._to) === 0 && !this._toUs;
      startsWithFromNick = msg.indexOf(this._from) === 0 && !this._fromUs;
      return startsWithToNick || startsWithFromNick;
    };

    /*
       * Clears the current style and adds the given style.
       * @param {string} style
    */


    MessageFormatter.prototype.setStyle = function(style) {
      return this._style = [style];
    };

    /*
       * Adds the given style.
       * @param {Array.<string>} style
    */


    MessageFormatter.prototype.addStyle = function(style) {
      if (!Array.isArray(style)) {
        style = [style];
      }
      return this._style = this._style.concat(style);
    };

    /*
       *
    */


    MessageFormatter.prototype.hasStyle = function(style) {
      return __indexOf.call(this._customStyle, style) >= 0 || __indexOf.call(this._style, style) >= 0;
    };

    /*
       * Returns the style of the message.
       * @param {string} style The combination of the added styles and custom styles.
       * @return {string} A space delimited string of styles to apply to the message.
    */


    MessageFormatter.prototype.getStyle = function() {
      var style;
      style = this._customStyle.concat(this._style);
      if (this._fromUs || this._toUs) {
        style.push('self');
      }
      return style.join(' ');
    };

    /*
       * Returns true if the user's nick equals the given nick.
       * @param nick The nick the check against
       * @return {boolean}
    */


    MessageFormatter.prototype._isOwnNick = function(nick) {
      return irc.util.nicksEqual(this._nick, nick);
    };

    return MessageFormatter;

  })();

  exports.MessageFormatter = MessageFormatter;

}).call(this);
