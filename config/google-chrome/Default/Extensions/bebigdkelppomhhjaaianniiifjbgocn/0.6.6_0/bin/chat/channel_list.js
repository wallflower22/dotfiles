// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var ChannelList, exports, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  var exports = (_ref = window.chat) != null ? _ref : window.chat = {};

  /*
   * A list of servers and channels to which the user is connected.
  */


  ChannelList = (function(_super) {

    __extends(ChannelList, _super);

    function ChannelList() {
      this._handleClick = __bind(this._handleClick, this);
      this._handleMiddleClick = __bind(this._handleMiddleClick, this);
      ChannelList.__super__.constructor.apply(this, arguments);
      this.$surface = $('#rooms-container .rooms');
      this.roomsByServer = {};
      this._addFooter();
    };

    ChannelList.prototype._addFooter = function() {
      var _this = this;
      this._footerHtml = this._createAndAppendServerHTML('+ add server');
      var serverRoomHtml = $('.server', this._footerHtml);
      serverRoomHtml.addClass('footer');
      serverRoomHtml.mousedown(function(event) {
        if (event.which == 1) {
          _this._handleAddServerClick();
        }
      });
    };

    ChannelList.prototype.select = function(server, channel) {
      this._removeLastSelected();
      this._addClass(server, channel, 'selected');
      this._addClass(server, null, 'current-server');
      this._removeClass(server, channel, 'activity');
      return this._removeClass(server, channel, 'mention');
    };

    ChannelList.prototype._removeLastSelected = function() {
      this.removeFirstInstanceOfClass('selected');
      this.removeFirstInstanceOfClass('current-server');
    };

    ChannelList.prototype.removeFirstInstanceOfClass = function(cssClass) {
      var elementWithClass = $('.' + cssClass, this.$surface);
      if (elementWithClass) {
        elementWithClass.removeClass(cssClass);
      }
    }

    ChannelList.prototype.activity = function(server, opt_channel) {
      return this._addClass(server, opt_channel, 'activity');
    };

    ChannelList.prototype.mention = function(server, opt_channel) {
      return this._addClass(server, opt_channel, 'mention');
    };

    ChannelList.prototype.remove = function(server, opt_channel) {
      if (opt_channel != null) {
        return this.roomsByServer[server].channels.remove(opt_channel);
      } else {
        this.roomsByServer[server].html.remove();
        return delete this.roomsByServer[server];
      }
    };

    ChannelList.prototype.insertChannel = function(i, server, channel) {
      this.roomsByServer[server].channels.insert(i, channel);
      return this.disconnect(server, channel);
    };

    /**
     * Adds a server that will never have any channels, e.g. when we add the
     * welcome window.
     */
    ChannelList.prototype.addAlwaysEmptyServer = function(serverName) {
      this.addServer(serverName);
      this._addClass(serverName, null, 'always-empty');
    }

    ChannelList.prototype.addServer = function(serverName) {
      var channels, html, server;
      html = this._createAndAppendServerHTML(serverName);
      server = $('.server', html);
      channels = this._createChannelList(html);
      this._handleMouseEvents(serverName, server, channels);
      this.roomsByServer[serverName.toLowerCase()] = {
        html: html,
        server: server,
        channels: channels
      };
      return this.disconnect(serverName);
    };

    ChannelList.prototype._createAndAppendServerHTML = function(serverName) {
      var html;
      html = $('#templates .server-channels').clone();
      $('.server .content-item', html).text(serverName);
      if (this._footerHtml) {
        html.insertBefore(this._footerHtml);
      } else {
        this.$surface.append(html);
      }
      return html;
    };

    ChannelList.prototype._createChannelList = function(html) {
      var channelList, channelTemplate;
      channelTemplate = $('#templates .channel');
      channelList = new chat.HTMLList($('.channels', html), channelTemplate);
      channelList.setFooterNodeText('+ add channel');
      return channelList;
    };

    ChannelList.prototype._handleMouseEvents = function(serverName, server, channels) {
      var _this = this;
      server.mousedown(function(event) {
        if (event.which == 1) {
          if ($(event.target).hasClass('remove-button')) {
            _this._handleRemoveRoom(serverName);
          } else {
            _this._handleClick(serverName);
          }
        }
      });
      channels.on('clicked', function(channelName) {
        _this._handleClick(serverName, channelName);
      });
      channels.on('midclicked', function(channelName) {
        _this._handleMiddleClick(serverName, channelName);
      });
      channels.on('footer_clicked', function() {
        _this._handleAddChannelClick();
      });
      channels.on('remove_button_clicked', function(channelName) {
        _this._handleRemoveRoom(serverName, channelName);
      });
    };

    ChannelList.prototype.disconnect = function(server, opt_channel) {
      return this._addClass(server, opt_channel, 'disconnected');
    };

    ChannelList.prototype.connect = function(server, opt_channel) {
      return this._removeClass(server, opt_channel, 'disconnected');
    };

    ChannelList.prototype._addClass = function(server, channel, c) {
      if (channel != null) {
        return this.roomsByServer[server].channels.addClass(channel.toLowerCase(), c);
      } else {
        return this.roomsByServer[server].server.addClass(c);
      }
    };

    ChannelList.prototype._removeClass = function(server, channel, c) {
      if (channel != null) {
        return this.roomsByServer[server].channels.removeClass(channel.toLowerCase(), c);
      } else {
        return this.roomsByServer[server].server.removeClass(c);
      }
    };

    ChannelList.prototype._handleClick = function(server, channel) {
      return this.emit('clicked', server, channel);
    };

    ChannelList.prototype._handleMiddleClick = function(server, channel) {
      return this.emit('midclicked', server, channel);
    };

    ChannelList.prototype._handleAddChannelClick = function() {
      this.emit('help_type_command', '/join #');
    };

    ChannelList.prototype._handleAddServerClick = function() {
      this.emit('help_type_command', '/server ');
    };

    ChannelList.prototype._handleRemoveRoom = function(server, channel) {
      this.emit('remove_button_clicked', server, channel);
    };

    return ChannelList;

  })(EventEmitter);

  exports.ChannelList = ChannelList;

}).call(this);
