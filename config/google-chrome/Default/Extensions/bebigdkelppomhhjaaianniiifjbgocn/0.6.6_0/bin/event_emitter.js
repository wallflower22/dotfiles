// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var EventEmitter, exports,
    __slice = [].slice;

  var exports = window;

  /*
   * Manages the sending and receiving of events.
  */


  EventEmitter = (function() {

    function EventEmitter() {
      this._log = getLogger(this);
      this._listeners = {};
      this._anyEventListeners = [];
    }

    EventEmitter.prototype.onAny = function(cb) {
      return this._anyEventListeners.push(cb);
    };

    EventEmitter.prototype.on = function(ev, cb) {
      var _base, _ref;
      return ((_ref = (_base = this._listeners)[ev]) != null ? _ref : _base[ev] = []).push(cb);
    };

    EventEmitter.prototype.emit = function() {
      var args, ev, l, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      ev = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref1 = (_ref = this._listeners[ev]) != null ? _ref : [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        l = _ref1[_i];
        l.apply(null, args);
      }
      _ref2 = this._anyEventListeners;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        l = _ref2[_j];
        _results.push(l.apply(null, [ev].concat(__slice.call(args))));
      }
      return _results;
    };

    EventEmitter.prototype.once = function(ev, cb) {
      var f,
        _this = this;
      this.on(ev, f = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _this.removeListener(ev, f);
        return cb.apply(null, args);
      });
      return f.listener = cb;
    };

    EventEmitter.prototype.removeListener = function(ev, cb) {
      var c;
      if (!(this._listeners && this._listeners[ev] && (cb != null))) {
        return;
      }
      return this._listeners[ev] = (function() {
        var _i, _len, _ref, _results;
        _ref = this._listeners[ev];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c !== cb && c.listener !== cb) {
            _results.push(c);
          }
        }
        return _results;
      }).call(this);
    };

    return EventEmitter;

  })();

  exports.EventEmitter = EventEmitter;

}).call(this);
