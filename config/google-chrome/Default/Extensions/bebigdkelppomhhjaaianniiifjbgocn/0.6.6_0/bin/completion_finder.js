// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";
  var CompletionFinder, exports;

  var exports = window;

  /*
   * Finds completions for a partial word.
   * Completion candidates can be set using setCompletions() or by specifying a
   * completion generator function.
  */


  CompletionFinder = (function() {
    /*
       * Returned when no completion was found.
    */

    CompletionFinder.NONE = void 0;

    /*
       * Create a new completion finder and optionally set a callback that can be
       * used to retrieve completion candidates.
       * @param {function():Array<string>} opt_getCompletionsCallback
    */


    function CompletionFinder(opt_getCompletionsCallback) {
      this._completions = [];
      this._getCompletions = opt_getCompletionsCallback;
      this.reset();
    }

    /*
       * Set a callback that can be used to retrieve completion candidates.
       * @param {function():Array<string>} completionGenerator
    */


    CompletionFinder.prototype.setCompletionGenerator = function(completionGenerator) {
      return this._getCompletions = completionGenerator;
    };

    /*
       * Clear stored completion candidates.
    */


    CompletionFinder.prototype.clearCompletions = function() {
      return this._completions = [];
    };

    /*
       * Add completion candidates.
       * @param {Array<string>} completions
    */


    CompletionFinder.prototype.addCompletions = function(completions) {
      return this._completions = this._completions.concat(completions);
    };

    CompletionFinder.prototype.setCompletions = function(completions) {
      this.clearCompletions();
      return this.addCompletions(completions);
    };

    /*
       * Get a completion for the current stub.
       * The stub only needs to be passed in the first time getCompletion() is
       * called or after reset() is called.
       * @param {string} opt_stub The partial word to auto-complete.
    */


    CompletionFinder.prototype.getCompletion = function(opt_stub) {
      if (!this.hasStarted) {
        this._generateCompletions();
        this._currentStub = opt_stub;
        this._findCompletions();
        this.hasStarted = true;
      }
      return this._getNextCompletion();
    };

    /*
       * Add completions from the completion generator, if set.
    */


    CompletionFinder.prototype._generateCompletions = function() {
      if (this._getCompletions != null) {
        return this.setCompletions(this._getCompletions());
      }
    };

    /*
       * Create a list of all possible completions for the current stub.
    */


    CompletionFinder.prototype._findCompletions = function() {
      var candidate, completion, completionText, ignoreCase, _i, _len, _ref, _results;
      ignoreCase = !/[A-Z]/.test(this._currentStub);
      _ref = this._completions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        completion = _ref[_i];
        completionText = completion.toString();
        candidate = ignoreCase ? completionText.toLowerCase() : completionText;
        if (candidate.indexOf(this._currentStub) === 0) {
          _results.push(this._currentCompletions.push(completion));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    /*
       * Get the next completion, or NONE if no completions are found.
       * Completions are returned by iterating through the list of possible
       * completions.
       * @returns {string|NONE}
    */


    CompletionFinder.prototype._getNextCompletion = function() {
      var result;
      if (this._currentCompletions.length === 0) {
        return CompletionFinder.NONE;
      }
      result = this._currentCompletions[this._completionIndex];
      this._completionIndex++;
      if (this._completionIndex >= this._currentCompletions.length) {
        this._completionIndex = 0;
      }
      return result;
    };

    /*
       * Reset the current stub and clear the list of possible completions.
       * The current stub will be set again the next time getCompletion() is called.
    */


    CompletionFinder.prototype.reset = function() {
      this._currentCompletions = [];
      this._completionIndex = 0;
      this.currentStub = '';
      return this.hasStarted = false;
    };

    return CompletionFinder;

  })();

  exports.CompletionFinder = CompletionFinder;

}).call(this);
